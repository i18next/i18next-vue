import{_ as e,c as s,o,a4 as t}from"./chunks/framework.BvPOVqEH.js";const f=JSON.parse('{"title":"SSR","description":"","frontmatter":{},"headers":[],"relativePath":"guide/ssr.md","filePath":"guide/ssr.md","lastUpdated":1690070280000}'),a={name:"guide/ssr.md"},n=t('<h1 id="ssr" tabindex="-1">SSR <a class="header-anchor" href="#ssr" aria-label="Permalink to &quot;SSR&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This is mostly theoretical information. If you have feedback about <code>i18next-vue</code> in a SSR context, please let us know via a GitHub issue ❤️.</p></div><p>When using Server Side Rendering (SSR), i18next-vue makes sure to not introduce memory leaks. To do that, two i18next-vue features are not available on the server.</p><h2 id="no-component-specific-messages" tabindex="-1">No component-specific messages <a class="header-anchor" href="#no-component-specific-messages" aria-label="Permalink to &quot;No component-specific messages&quot;">​</a></h2><p>Neither <a href="./single-file-component.html"><code>&lt;i18&gt;</code> blocks</a> nor translations defined via <a href="./i18n-options.html#messages"><code>i18nOptions.messages</code></a> are supported. These are usually registered by i18next-vue with i18next in a Vue lifecycle hook and de-registered when the component is dismounted.</p><p>As there is <a href="https://vuejs.org/guide/scaling-up/ssr.html#component-lifecycle-hooks" target="_blank" rel="noreferrer">no <code>unmounted()</code> life-cycle hook</a> during SSR, we ignore these messages.</p><h2 id="no-rerenderon-updates" tabindex="-1">No <code>rerenderOn</code> updates <a class="header-anchor" href="#no-rerenderon-updates" aria-label="Permalink to &quot;No `rerenderOn` updates&quot;">​</a></h2><p>The <code>rerenderOn</code> plugin option is ignored on the server. The i18next instance needs to be properly set up with e.g. language and messages before rendering. Because of this, there is no need for such i18next reactivity.</p>',8),r=[n];function i(c,d,l,h,p,u){return o(),s("div",null,r)}const g=e(a,[["render",i]]);export{f as __pageData,g as default};
