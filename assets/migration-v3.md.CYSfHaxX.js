import{_ as n,c as a,m as e,a as t,J as r,a4 as i,E as s,o as l}from"./chunks/framework.BvPOVqEH.js";const S=JSON.parse('{"title":"Migration to i18next-vue v3.x","description":"","frontmatter":{},"headers":[],"relativePath":"migration-v3.md","filePath":"migration-v3.md","lastUpdated":1705690621000}'),c={name:"migration-v3.md"},u=i('<h1 id="migration-to-i18next-vue-v3-x" tabindex="-1">Migration to <code>i18next-vue</code> v3.x <a class="header-anchor" href="#migration-to-i18next-vue-v3-x" aria-label="Permalink to &quot;Migration to `i18next-vue` v3.x&quot;">​</a></h1><p>If you used version 1.x/v2.x before, there are some breaking changes in version 3.</p><p>If you upgrade from version 1.x, <a href="/i18next-vue/guide/started.html">setup of plugins</a> has changed in Vue 3. Apart from the Vue 3 migration itself, the changes in <code>i18next-vue</code> should be the same as coming from 2.x.</p><p>There are additional instructions for upgrading <a href="/i18next-vue/migration-v4.html">from version 3 to version 4</a>.</p><h2 id="breaking-changes" tabindex="-1">Breaking changes <a class="header-anchor" href="#breaking-changes" aria-label="Permalink to &quot;Breaking changes&quot;">​</a></h2>',5),d=i('<li>requires <code>i18next</code> &gt;=23 <ul><li>Consult the <a href="https://www.i18next.com/misc/migration-guide" target="_blank" rel="noreferrer"><code>i18next</code> Migration Guide</a> for updating.</li></ul></li><li>the 3.x package is ESM-only <ul><li>Relevant only for <a href="https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c" target="_blank" rel="noreferrer">CommonJS users</a>, i. e. when using <code>require()</code> imports</li></ul></li>',2),p=e("a",{href:"/i18next-vue/guide/i18n-options.html"},[e("code",null,"i18nOptions")],-1),h=i('<ul><li>You can use <code>useTranslation()</code> with its <a href="/i18next-vue/guide/composition-api.html#customize-t">new parameters</a> for most of these use-cases instead.</li><li>Legacy support for <code>i18nOptions</code> needs to be enabled explicitly via the <a href="/i18next-vue/guide/started.html#plugin-options"><code>legacyI18nOptionsSupport: true</code> plugin option</a></li><li>This allows component-by-component migration to <code>useTranslation()</code> using the 3.x version. Support for <code>i18nOptions</code> is removed in 4.0.</li></ul>',1),_=e("li",null,[t("removed support for "),e("code",null,"<i18n>"),t(" blocks in SFCs and "),e("code",null,"messages"),t(" in "),e("code",null,"i18nOptions"),e("ul",null,[e("li",null,"i.e. no more per-component translations"),e("li",null,"There is no replacement for this, as this seems to be a rarely used feature. If you do use this a lot, please open a feature request.")])],-1),m=i('<h2 id="new-changed-functionality" tabindex="-1">New/changed functionality <a class="header-anchor" href="#new-changed-functionality" aria-label="Permalink to &quot;New/changed functionality&quot;">​</a></h2><ul><li>new <code>useTranslation()</code> parameters to <a href="/i18next-vue/guide/composition-api.html#customize-t">specify a fixed language, namespace(s) and a keyprefix</a> (all optional)</li><li><code>$t</code>/<code>t</code> functions will return an empty string while i18next is loading <ul><li>v2 returned the untranslated translation key, which is usually uglier</li></ul></li><li>support for <a href="https://www.i18next.com/overview/typescript" target="_blank" rel="noreferrer">TypeScript auto-completion of translation keys</a><ul><li>via <code>i18next</code>&#39;s support for this</li><li>Your mileage may vary (dev performance, ...). If it works for you, it can be quite useful.</li></ul></li></ul>',2);function g(f,v,x,T,y,b){const o=s("Badge");return l(),a("div",null,[u,e("ul",null,[d,e("li",null,[t("deprecated support for "),p,t(" (Options API) "),r(o,{type:"warning",text:"removed in 4.0"}),h]),_]),m])}const k=n(c,[["render",g]]);export{S as __pageData,k as default};
